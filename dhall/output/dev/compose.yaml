services:
  "config-server-nginx":
    container_name: "config-server-nginx"
    healthcheck:
      interval: 10s
      retries: 10
      test: "service nginx status || exit 1"
      timeout: 1s
    image: nginx
    ports:
    - "8887:80"
    volumes:
    - read_only: false
      source: ./configs/
      target: /usr/share/nginx/html
      type: bind
  "network-test":
    command: bbb.vertx_demo.NetworkTestVerticle
    container_name: "network-test"
    environment:
      JAVA_TOOL_OPTIONS: |
        -Dlogback.configurationFile=/logs/logback.xml
        -Djava.net.preferIPv4Stack=true
    image: "marekdudek/vertx-demo:1.0.30-SNAPSHOT"
    ports:
    - "18080:18080"
    - "18443:18443"
    volumes:
    - read_only: false
      source: ./logs/
      target: /logs/
      type: bind
    - read_only: false
      source: "./log-data/"
      target: "/log-data/"
      type: bind
  pgadmin:
    container_name: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: "user@domain.com"
      PGADMIN_DEFAULT_PASSWORD: secret
    image: dpage/pgadmin4
    ports:
    - "5050:80"
    restart: "unless-stopped"
    volumes:
    - read_only: false
      source: ./pgadmin/servers.json
      target: /pgadmin4/servers.json
      type: bind
  postgres:
    container_name: postgres
    environment:
      POSTGRES_DB: vertx_demo_dev_database
      POSTGRES_PASSWORD: vertx_demo_dev_password
      POSTGRES_USER: vertx_demo_dev_user
    healthcheck:
      interval: 3s
      retries: 10
      test: "pg_isready -U vertx_demo_dev_user -d vertx_demo_dev_database"
      timeout: 1s
    image: postgres
    ports:
    - "5432:5432"
    restart: "unless-stopped"
  psql:
    command: |
      --dbname=vertx_demo_dev_database --username vertx_demo_dev_user --host postgres --port 5432  --echo-all --single-transaction
      --file sql/init-db.sql
    container_name: psql
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: vertx_demo_dev_password
    image: alpine/psql
    volumes:
    - read_only: false
      source: ./sql
      target: /sql
      type: bind
  qpid:
    container_name: qpid
    environment:
      JAVA_GC: "-XX:+UseG1GC"
      JAVA_MEM: "-Xmx256m -XX:MaxDirectMemorySize=128m"
      JAVA_OPTS: ''
      QPID_ADMIN_PASSWORD: dev_secret
      QPID_ADMIN_USER: dev_admin
    healthcheck:
      interval: 5s
      retries: 3
      test: "curl -u dev_admin:dev_secret --basic -o /dev/null -f -w %{http_code} http://dev_admin:dev_secret@localhost:8080/api/latest/broker"
      timeout: 3s
    image: "apache/qpid-broker-j"
    ports:
    - "5672:5672"
    - "15672:8080"
    volumes:
    - read_only: false
      source: ./qpid/default.json
      target: "/qpid-broker-j/work-init/default.json"
      type: bind
  redis:
    command: "redis-server --appendonly yes"
    container_name: redis
    image: "redis:latest"
    ports:
    - "6379:6379"
    restart: "unless-stopped"
    volumes:
    - "redis_data:/data"
  "vertx-demo":
    command: |
      -conf='{
        "amqp": {
          "client": {
            "delay": 600000,
            "queue": "client-queue"
          },
          "host": "qpid",
          "password": "dev_secret",
          "port": 5672,
          "reconnect-attempts": 2147483647,
          "reconnect-interval": 100,
          "server": {
            "delay": 600000,
            "queue": "server-queue"
          },
          "username": "dev_admin"
        },
        "config-server": {
          "host": "host.docker.internal",
          "path": "/conf.json",
          "port": 8887,
          "scan-period": "PT5S",
          "version": "DEV inline"
        },
        "http": {
          "cache": {
            "about": { "max-age": "PT1S" },
            "crypto-news": { "max-age": "PT1S" },
            "forex-news": { "max-age": "PT1S" },
            "general-news": { "max-age": "PT1S" },
            "home": { "max-age": "PT1S" },
            "ipos": { "max-age": "PT1S" },
            "merger-news": { "max-age": "PT1S" }
          },
          "cert-path": "security/smooth-all/server.cert.pem",
          "insecure-port": 8081,
          "key-path": "security/smooth-all/server.key.pem",
          "secure-port": 8444
        },
        "postgres": {
          "database": "vertx_demo_dev_database",
          "default-schema": "finnhub",
          "host": "host.docker.internal",
          "password": "vertx_demo_dev_password",
          "port": 5432,
          "ssl-mode": "disable",
          "trust-all": false,
          "user": "vertx_demo_dev_user"
        },
        "redis.host": "redis",
        "telnet.port": 5001,
        "updater": {
          "ipo-updater-delay": "PT1H",
          "news-crypto-updater-delay": "PT1M",
          "news-forex-updater-delay": "PT1M",
          "news-general-updater-delay": "PT1M",
          "news-merger-updater-delay": "PT1M"
        }
      }
      '
    container_name: "vertx-demo"
    depends_on:
      "config-server-nginx":
        condition: service_healthy
      postgres:
        condition: service_healthy
      psql:
        condition: service_completed_successfully
      qpid:
        condition: service_healthy
    environment:
      JAVA_TOOL_OPTIONS: |
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
        -Dlogback.configurationFile=/logs/logback.xml
        -Djava.net.preferIPv4Stack=true
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Dcom.sun.management.jmxremote.port=1099
        -Dcom.sun.management.jmxremote.rmi.port=1099
        -Djava.rmi.server.hostname=0.0.0.0
      VERSION: "1.0.30-SNAPSHOT"
    healthcheck:
      interval: 10s
      retries: 10
      test: "curl -f http://localhost:8081/health"
      timeout: 1s
    image: "marekdudek/vertx-demo:1.0.30-SNAPSHOT"
    ports:
    - "8081:8081"
    - "8444:8444"
    - "5005:5005"
    - "5001:5001"
    - "1099:1099"
    volumes:
    - read_only: false
      source: ./logs/
      target: /logs/
      type: bind
    - read_only: false
      source: "./log-data/"
      target: "/log-data/"
      type: bind
volumes:
  redis_data: {}
